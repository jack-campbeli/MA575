# I(`year`^2),
# I(`year`^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
vif(model)
model = lm(
`GrossBoxOffice` ~
`years_past_1975`,
# I(`year`^2),
# I(`year`^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
vif(model)
model = lm(
`GrossBoxOffice` ~
`year`,
# I(`year`^2),
# I(`year`^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
vif(model)
model = lm(
`GrossBoxOffice` ~
`year`,
I(`year`^2),
# I(`year`^3),
data = q2_data
)
model = lm(
`GrossBoxOffice` ~
`year`,
I(q2_data$`year`^2),
# I(`year`^3),
data = q2_data
)
model = lm(
`GrossBoxOffice` ~
`year`,
I(`year`)^2,
# I(`year`^3),
data = q2_data
)
model = gls(
`GrossBoxOffice` ~
`year`,
I(`year`^2),
# I(`year`^3),
data = q2_data
)
# Load necessary libraries
library(dplyr)
# Assuming q2_data is your dataset
# Create lagged variable for autocorrelation
q2_data <- q2_data %>%
arrange(year) %>%
mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice))
# Fit the improved model
improved_model <- lm(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
vif(model)
# Load necessary libraries
library(dplyr)
# Assuming q2_data is your dataset
# Create lagged variable for autocorrelation
q2_data <- q2_data %>%
arrange(year) %>%
mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice))
View(q2_data)
# Fit the improved model
improved_model <- lm(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/jackw/Documents/MA575/Project")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
q2_data = read.table("boxoffice.txt", header=TRUE)
q2_data$years_past_1975 = q2_data$year - 1975
View(q2_data)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice))
View(q2_data)
# Fit the improved model
improved_model <- lm(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
vif(model)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year +  I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = replace_na(lag(GrossBoxOffice),0))
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice), lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
setwd("C:/Users/jackw/Documents/MA575/Project")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
library(tidyr)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice), lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice), lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/jackw/Documents/MA575/Project")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
library(tidyr)
q2_data = read.table("boxoffice.txt", header=TRUE)
q2_data$years_past_1975 = q2_data$year - 1975
View(q2_data)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice), lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice), lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2),
correlation = corAR1(form = ~ 1 | year),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice), lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
View(q2_data)
# Fit the improved model
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
summary(model)
plot(model)
avPlots(model)
residuals <- residuals(improved_model)
# Plot the ACF of standardized residuals
acf(residuals / sd(residuals))
# Assuming improved_model is your gls model
predicted_2008 <- predict(improved_model, newdata = data.frame(year = 2008))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/jackw/Documents/MA575/Project")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
library(tidyr)
q2_data = read.table("boxoffice.txt", header=TRUE)
q2_data$years_past_1975 = q2_data$year - 1975
View(q2_data)
improved_model <- gls(
GrossBoxOffice ~ year  + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
residuals <- residuals(improved_model)
# Plot the ACF of standardized residuals
acf(residuals / sd(residuals))
# Assuming improved_model is your gls model
predicted_2008 <- predict(improved_model, newdata = data.frame(year = 2008))
# Display the predicted value
cat("Predicted GrossBoxOffice for the year 2008:", predicted_2008)
boxplot(data$year)
boxplot(data$`year`)
boxplot(q2_data$`year`)
plot(q2_data$`GrossBoxOffice `,q2_data$`year`)
plot(q2_data$`GrossBoxOffice `,q2_data$`year`)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/jackw/Documents/MA575/Project")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
library(tidyr)
q2_data = read.table("boxoffice.txt", header=TRUE)
q2_data$years_past_1975 = q2_data$year - 1975
View(q2_data)
improved_model <- gls(
GrossBoxOffice ~ year  + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
residuals <- residuals(improved_model)
# Plot the ACF of standardized residuals
acf(residuals / sd(residuals))
predicted_2008 <- predict(improved_model, newdata = data.frame(year = 2008))
cat("Predicted GrossBoxOffice for the year 2008:", predicted_2008)
plot(q2_data$`GrossBoxOffice `,q2_data$`year`)
plot(q2_data$GrossBoxOffice,q2_data$year)
boxplot(q2_data$`year`)
plot(q2_data$year,q2_data$GrossBoxOffice)
boxplot(q2_data$`year`)
plot(q2_data$year,q2_data$GrossBoxOffice)
boxplot(q2_data$`GrossBoxOffice`)
library(readr)
q3_data <- read_csv("MA575/hw7/UN11(5).csv")
setwd("C:/Users/jackw/Documents/MA575/hw7")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
library(tidyr)
q2_data = read.table("boxoffice.txt", header=TRUE)
q2_data$years_past_1975 = q2_data$year - 1975
View(q2_data)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/jackw/Documents/MA575/hw7")
library(ggplot2)
library(dplyr)
library(GGally)
library(car)
library(nlme)
library(dplyr)
library(tidyr)
q2_data = read.table("boxoffice.txt", header=TRUE)
q2_data$years_past_1975 = q2_data$year - 1975
View(q2_data)
improved_model <- gls(
GrossBoxOffice ~ year  + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
residuals <- residuals(improved_model)
# Plot the ACF of standardized residuals
acf(residuals / sd(residuals))
predicted_2008 <- predict(improved_model, newdata = data.frame(year = 2008))
cat("Predicted GrossBoxOffice for the year 2008:", predicted_2008)
plot(q2_data$year,q2_data$GrossBoxOffice)
boxplot(q2_data$`GrossBoxOffice`)
library(readr)
q3_data <- read_csv("MA575/hw7/UN11(5).csv")
q2_data <- q2_data %>% arrange(year) %>% mutate(lagged_GrossBoxOffice = lag(GrossBoxOffice),lagged_GrossBoxOffice = replace_na(lagged_GrossBoxOffice, 0))
improved_model <- gls(
GrossBoxOffice ~ year + lagged_GrossBoxOffice + I(year^2) + I(year^3),
data = q2_data
)
summary(model)
plot(model)
avPlots(model)
residuals <- residuals(improved_model)
# Plot the ACF of standardized residuals
acf(residuals / sd(residuals))
library(readr)
q3_data <- read_csv("UN11(5).csv")
View(q3_data)
library(boot)
library(MASS)  # For the data set
# Define the OLS regression model function
ols_model <- function(data, indices) {
# Subset the data based on bootstrap samples
sampled_data <- data[indices, ]
# Fit the OLS regression model
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
# Return the coefficients
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(123)
# Perform the residual bootstrap
res_boot <- boot(data = df, statistic = ols_model, R = 1000)
library(boot)
library(MASS)  # For the data set
# Define the OLS regression model function
ols_model <- function(data, indices) {
# Subset the data based on bootstrap samples
sampled_data <- data[indices, ]
# Fit the OLS regression model
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
# Return the coefficients
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(123)
# Perform the residual bootstrap
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
# View the results
summary(res_boot)
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 3))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
par(mfrow = c(1, 5))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
library(boot)
library(MASS)
# Define the OLS regression model function
ols_model <- function(data, indices) {
# Subset the data based on bootstrap samples
sampled_data <- data[indices, ]
# Fit the OLS regression model
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
# Return the coefficients
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(123)
# Perform the residual bootstrap
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
# View the results
summary(res_boot)
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 4))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
library(boot)
library(MASS)
# Define the OLS regression model function
ols_model <- function(data, indices) {
# Subset the data based on bootstrap samples
sampled_data <- data[indices, ]
# Fit the OLS regression model
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
# Return the coefficients
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(123)
# Perform the residual bootstrap
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
# View the results
summary(res_boot)
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 2))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
library(boot)
library(MASS)
# Define the OLS regression model function
ols_model <- function(data, indices) {
# Subset the data based on bootstrap samples
sampled_data <- data[indices, ]
# Fit the OLS regression model
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
# Return the coefficients
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(123)
# Perform the residual bootstrap
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
# View the results
summary(res_boot)
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 1))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 1))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
library(boot)
library(MASS)
# Define the OLS regression model function
ols_model <- function(data, indices) {
# Subset the data based on bootstrap samples
sampled_data <- data[indices, ]
# Fit the OLS regression model
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
# Return the coefficients
return(coef(fit))
}
# Set the seed for reproducibility
set.seed(123)
# Perform the residual bootstrap
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
# View the results
summary(res_boot)
# Fit the original OLS regression model
ols_fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = df)
library(boot)
library(MASS)
ols_model <- function(data, indices) {s
sampled_data <- data[indices, ]
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
return(coef(fit))
}
set.seed(0)
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
library(boot)
library(MASS)
ols_model <- function(data, indices) {
sampled_data <- data[indices, ]
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
return(coef(fit))
}
set.seed(0)
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
summary(res_boot)
ols_fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = q3_data)
summary(ols_fit)
library(boot)
library(MASS)
ols_model <- function(data, indices) {
sampled_data <- data[indices, ]
fit <- lm(fertility ~ log(ppgdp) + log(pctUrban), data = sampled_data)
return(coef(fit))
}
set.seed(0)
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
summary(res_boot)
set.seed(0)
ols_fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = q3_data)
summary(ols_fit)
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 1))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
library(boot)
library(MASS)
ols_model <- function(data, indices) {
sampled_data <- data[indices, ]
fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = sampled_data)
return(coef(fit))
}
set.seed(0)
res_boot <- boot(data = q3_data, statistic = ols_model, R = 1000)
summary(res_boot)
set.seed(0)
ols_fit <- lm(fertility ~ log(ppgdp) + pctUrban, data = q3_data)
summary(ols_fit)
# Plot histograms of the bootstrap replications for each coefficient
par(mfrow = c(1, 1))
hist(res_boot$t[, 1], main = "Bootstrap Coefficient for Intercept", xlab = "Coefficient Value")
hist(res_boot$t[, 2], main = "Bootstrap Coefficient for log(ppgdp)", xlab = "Coefficient Value")
hist(res_boot$t[, 3], main = "Bootstrap Coefficient for pctUrban", xlab = "Coefficient Value")
