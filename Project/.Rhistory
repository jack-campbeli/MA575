# Display the calculated metrics
cat("Root Mean Squared Error (RMSE):", round(rmse, digits = 4), "\n")
cat("Mean Absolute Error (MAE):", round(mae, digits = 4), "\n")
cat("R-squared (RË†2) Score:", round(r_squared, digits = 4), "\n")
cat("Mean Absolute Percentage Error (MPE):", round(mape, digits = 4), "\n")
ggplot(test, aes(x = observed_values, y = predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(x = "Observed Values", y = "Predicted Values",
title = "Observed vs. Predicted Values") +
theme_bw()
ggplot(test, aes(x = 1:nrow(test), y = observed_values-predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 0, color = "red", linetype = "dashed") +
labs(x = "Observation Index", y = "Residuals",
title = "Observed vs. Predicted Values") +
theme_bw()
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13)
labels = c("Winter", "Spring", "Summer", "Fall"))
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
# facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13)
labels = c("Winter", "Spring", "Summer", "Fall"))
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
# facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13),
labels = c("Winter", "Spring", "Summer", "Fall"))
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
# facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13),
labels = c("Spring", "Summer", "Fall", "Winter", "Spring"))
# facebook_enum[["Page.Total.Likes.Diff"]] <- NA
# facebook_enum[["Page.Total.Likes.Diff"]] <- c(0, diff(facebook_enum[["Page.total.likes"]]))
# print(facebook_enum[["Page.Total.Likes.Diff"]])
# facebook_enum$`TimePeriod` <- NA
# facebook_enum$`TimePeriod` <- ifelse(facebook_enum$`Post.Hour` >= 6 & facebook_enum$`Post.Hour` < 22, "Day", "Night")
# facebook_enum$`TimePeriod` <- as.integer(factor(facebook_enum$`TimePeriod`, levels = c("Night","Day")))
head(facebook_enum)
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
# facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13),
labels = c("Winter", "Spring", "Summer", "Fall", "Winter"))
# facebook_enum[["Page.Total.Likes.Diff"]] <- NA
# facebook_enum[["Page.Total.Likes.Diff"]] <- c(0, diff(facebook_enum[["Page.total.likes"]]))
# print(facebook_enum[["Page.Total.Likes.Diff"]])
# facebook_enum$`TimePeriod` <- NA
# facebook_enum$`TimePeriod` <- ifelse(facebook_enum$`Post.Hour` >= 6 & facebook_enum$`Post.Hour` < 22, "Day", "Night")
# facebook_enum$`TimePeriod` <- as.integer(factor(facebook_enum$`TimePeriod`, levels = c("Night","Day")))
head(facebook_enum)
plot(density(sqrt(facebook_enum[["sqrt_lt_pc"]])))
plot(density(sqrt(facebook_enum[["sqrt_ptl"]])))
# plot(density(facebook_enum[["Page.Total.Likes.Diff"]]))
# plot(density(facebook_enum$`TimePeriod`))
plot(density(facebook_enum[["Category"]]))
plot(density(facebook_enum[["Type"]]))
plot(density(facebook_enum[["Post.Month"]]))
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
# facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- as.integer(cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13),
labels = c("Winter", "Spring", "Summer", "Fall", "Winter")))
# facebook_enum[["Page.Total.Likes.Diff"]] <- NA
# facebook_enum[["Page.Total.Likes.Diff"]] <- c(0, diff(facebook_enum[["Page.total.likes"]]))
# print(facebook_enum[["Page.Total.Likes.Diff"]])
# facebook_enum$`TimePeriod` <- NA
# facebook_enum$`TimePeriod` <- ifelse(facebook_enum$`Post.Hour` >= 6 & facebook_enum$`Post.Hour` < 22, "Day", "Night")
# facebook_enum$`TimePeriod` <- as.integer(factor(facebook_enum$`TimePeriod`, levels = c("Night","Day")))
head(facebook_enum)
plot(density(sqrt(facebook_enum[["sqrt_lt_pc"]])))
plot(density(sqrt(facebook_enum[["sqrt_ptl"]])))
# plot(density(facebook_enum[["Page.Total.Likes.Diff"]]))
# plot(density(facebook_enum$`TimePeriod`))
plot(density(facebook_enum[["Category"]]))
plot(density(facebook_enum[["Type"]]))
plot(density(facebook_enum[["Post.Month"]]))
plot(density(facebook_enum[["Post.Hour"]]))
plot(density(facebook_enum[["Post.Weekday"]]))
plot(density(facebook_enum[["Paid"]]))
# Assuming 'facebook' is your data frame
scatterplotMatrix(facebook_enum[, c(
"sqrt_lt_pc",
"sqrt_ptl",
# "Page.Total.Likes.Diff",
"TimePeriod",
"Category",
"Type",
"Post.Month",
# "Post.Hour",
# "Post.Weekday",
"Paid"
)])
# Assuming 'facebook' is your data frame
scatterplotMatrix(facebook_enum[, c(
# "Page.Total.Likes.Diff",
# "TimePeriod",
"sqrt_lt_pc",
"sqrt_ptl",
"Category",
"Type",
"Post.Month",
"Post.Hour",
"Post.Weekday",
"Paid"
)])
training <- subset(facebook_enum, obs_type="Training")
test <- subset(facebook_enum, obs_type="Validation")
model = lm(
`sqrt_lt_pc` ~
# `Page.Total.Likes.Diff`+
`sqrt_ptl` +
`TimePeriod` +
`Category` +
`Type` +
`Post.Month` +
`Post.Hour` +
`Post.Weekday` +
`Paid`,
data = training
)
model = lm(
`sqrt_lt_pc` ~
# `Page.Total.Likes.Diff`+
# `TimePeriod` +
`sqrt_ptl` +
`Category` +
`Type` +
`Post.Month` +
`Post.Hour` +
`Post.Weekday` +
`Paid`,
data = training
)
knitr::opts_chunk$set(warning = FALSE)
setwd("C:/Users/jackw/Documents/R/Project")
# install.packages("readr")
# install.packages("car")
# install.packages("ggplot2")
# install.packages("MLmetrics")
# install.packages("caret")
library(readr)
library(car)
library(ggplot2)
library(MLmetrics)
library(caret)
facebook <- na.omit(read_delim("facebook_updated.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE))
View(facebook)
column_names <- names(facebook)
print(column_names)
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
# facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Post.Month` <- as.integer(cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13),
labels = c("Winter", "Spring", "Summer", "Fall", "Winter")))
# facebook_enum[["Page.Total.Likes.Diff"]] <- NA
# facebook_enum[["Page.Total.Likes.Diff"]] <- c(0, diff(facebook_enum[["Page.total.likes"]]))
# print(facebook_enum[["Page.Total.Likes.Diff"]])
# facebook_enum$`TimePeriod` <- NA
# facebook_enum$`TimePeriod` <- ifelse(facebook_enum$`Post.Hour` >= 6 & facebook_enum$`Post.Hour` < 22, "Day", "Night")
# facebook_enum$`TimePeriod` <- as.integer(factor(facebook_enum$`TimePeriod`, levels = c("Night","Day")))
head(facebook_enum)
plot(density(sqrt(facebook_enum[["sqrt_lt_pc"]])))
plot(density(sqrt(facebook_enum[["sqrt_ptl"]])))
# plot(density(facebook_enum[["Page.Total.Likes.Diff"]]))
# plot(density(facebook_enum$`TimePeriod`))
plot(density(facebook_enum[["Category"]]))
plot(density(facebook_enum[["Type"]]))
plot(density(facebook_enum[["Post.Month"]]))
plot(density(facebook_enum[["Post.Hour"]]))
plot(density(facebook_enum[["Post.Weekday"]]))
plot(density(facebook_enum[["Paid"]]))
# Assuming 'facebook' is your data frame
scatterplotMatrix(facebook_enum[, c(
# "Page.Total.Likes.Diff",
# "TimePeriod",
"sqrt_lt_pc",
"sqrt_ptl",
"Category",
"Type",
"Post.Month",
"Post.Hour",
"Post.Weekday",
"Paid"
)])
training <- subset(facebook_enum, obs_type="Training")
test <- subset(facebook_enum, obs_type="Validation")
model = lm(
`sqrt_lt_pc` ~
# `Page.Total.Likes.Diff`+
# `TimePeriod` +
`sqrt_ptl` +
`Category` +
`Type` +
`Post.Month` +
`Post.Hour` +
`Post.Weekday` +
`Paid`,
data = training
)
summary(model)
plot(model)
avPlots(model)
vif(model)
stepwise_model <- step(model, direction = "both")
summary(stepwise_model)
plot(stepwise_model)
avPlots(stepwise_model)
vif(stepwise_model)
reduced_model <- lm(
`sqrt_lt_pc` ~
`sqrt_ptl` +
`Category` +
`Type` +
# `Post.Hour` +
# `Post.Month` +
`Post.Weekday` +
`Paid`,
data = training
)
summary(reduced_model)
plot(reduced_model)
avPlots(reduced_model)
vif(reduced_model)
AIC(model, reduced_model)
BIC(model, reduced_model)
test$Predicted.Lifetime.Post.Consumers <- predict(reduced_model, newdata = test)
observed_values  <- test$Lifetime.Post.Consumers
predicted_values <- test$Predicted.Lifetime.Post.Consumers
rmse <- RMSE(predicted_values, observed_values)
mae <- MAE(predicted_values, observed_values)
mape <- MAPE(predicted_values, observed_values)
r_squared <- R2_Score(predicted_values, observed_values)
# Display the calculated metrics
cat("Root Mean Squared Error (RMSE):", round(rmse, digits = 4), "\n")
cat("Mean Absolute Error (MAE):", round(mae, digits = 4), "\n")
cat("R-squared (RË†2) Score:", round(r_squared, digits = 4), "\n")
cat("Mean Absolute Percentage Error (MPE):", round(mape, digits = 4), "\n")
ggplot(test, aes(x = observed_values, y = predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(x = "Observed Values", y = "Predicted Values",
title = "Observed vs. Predicted Values") +
theme_bw()
ggplot(test, aes(x = 1:nrow(test), y = observed_values-predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 0, color = "red", linetype = "dashed") +
labs(x = "Observation Index", y = "Residuals",
title = "Observed vs. Predicted Values") +
theme_bw()
# Assuming 'facebook' is your data frame
scatterplotMatrix(facebook_enum[, c(
# "Page.Total.Likes.Diff",
# "TimePeriod",
"Season",
"sqrt_lt_pc",
"sqrt_ptl",
"Category",
"Type",
"Post.Month",
"Post.Hour",
"Post.Weekday",
"Paid"
)])
knitr::opts_chunk$set(warning = FALSE)
setwd("C:/Users/jackw/Documents/R/Project")
# install.packages("readr")
# install.packages("car")
# install.packages("ggplot2")
# install.packages("MLmetrics")
# install.packages("caret")
library(readr)
library(car)
library(ggplot2)
library(MLmetrics)
library(caret)
facebook <- na.omit(read_delim("facebook_updated.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE))
View(facebook)
column_names <- names(facebook)
print(column_names)
facebook_enum <- facebook
head(facebook_enum)
facebook_enum["sqrt_lt_pc"] <- NA
facebook_enum["sqrt_lt_pc"] <- sqrt(facebook_enum[["Lifetime.Post.Consumers"]])
facebook_enum["sqrt_ptl"] <- NA
facebook_enum[["sqrt_ptl"]] <- sqrt(facebook_enum[["Page.total.likes"]])
facebook_enum[["Category"]] <- as.integer(as.factor(facebook_enum[["Category"]]))
facebook_enum[["Type"]] <- as.integer(as.factor(facebook_enum[["Type"]]))
facebook_enum[["Post.Month"]] <- as.integer(as.factor(facebook_enum[["Post.Month"]]))
facebook_enum[["Post.Hour"]] <- as.integer(as.factor(facebook_enum[["Post.Hour"]]))
facebook_enum[["Post.Weekday"]] <- as.integer(as.factor(facebook_enum[["Post.Weekday"]]))
facebook_enum[["Paid"]] <- as.integer(as.factor(facebook_enum[["Paid"]]))
facebook_enum$`Season` <- as.integer(cut(facebook_enum$`Post.Month`,
breaks = c(0, 3, 6, 9, 12, 13),
labels = c("Winter", "Spring", "Summer", "Fall", "Winter")))
# facebook_enum[["Page.Total.Likes.Diff"]] <- NA
# facebook_enum[["Page.Total.Likes.Diff"]] <- c(0, diff(facebook_enum[["Page.total.likes"]]))
# print(facebook_enum[["Page.Total.Likes.Diff"]])
# facebook_enum$`TimePeriod` <- NA
# facebook_enum$`TimePeriod` <- ifelse(facebook_enum$`Post.Hour` >= 6 & facebook_enum$`Post.Hour` < 22, "Day", "Night")
# facebook_enum$`TimePeriod` <- as.integer(factor(facebook_enum$`TimePeriod`, levels = c("Night","Day")))
head(facebook_enum)
plot(density(sqrt(facebook_enum[["sqrt_lt_pc"]])))
plot(density(sqrt(facebook_enum[["sqrt_ptl"]])))
# plot(density(facebook_enum[["Page.Total.Likes.Diff"]]))
# plot(density(facebook_enum$`TimePeriod`))
plot(density(facebook_enum[["Season"]]))
plot(density(facebook_enum[["Category"]]))
plot(density(facebook_enum[["Type"]]))
plot(density(facebook_enum[["Post.Month"]]))
plot(density(facebook_enum[["Post.Hour"]]))
plot(density(facebook_enum[["Post.Weekday"]]))
plot(density(facebook_enum[["Paid"]]))
# Assuming 'facebook' is your data frame
scatterplotMatrix(facebook_enum[, c(
# "Page.Total.Likes.Diff",
# "TimePeriod",
"Season",
"sqrt_lt_pc",
"sqrt_ptl",
"Category",
"Type",
"Post.Month",
"Post.Hour",
"Post.Weekday",
"Paid"
)])
training <- subset(facebook_enum, obs_type="Training")
test <- subset(facebook_enum, obs_type="Validation")
model = lm(
`sqrt_lt_pc` ~
# `Page.Total.Likes.Diff`+
# `TimePeriod` +
`sqrt_ptl` +
`Category` +
`Type` +
`Post.Month` +
`Post.Hour` +
`Post.Weekday` +
`Paid`,
data = training
)
summary(model)
plot(model)
avPlots(model)
vif(model)
stepwise_model <- step(model, direction = "both")
summary(stepwise_model)
plot(stepwise_model)
avPlots(stepwise_model)
vif(stepwise_model)
reduced_model <- lm(
`sqrt_lt_pc` ~
`sqrt_ptl` +
`Category` +
`Type` +
# `Post.Hour` +
# `Post.Month` +
`Post.Weekday` +
`Paid`,
data = training
)
summary(reduced_model)
plot(reduced_model)
avPlots(reduced_model)
vif(reduced_model)
AIC(model, reduced_model)
BIC(model, reduced_model)
test$Predicted.Lifetime.Post.Consumers <- predict(reduced_model, newdata = test)
observed_values  <- test$Lifetime.Post.Consumers
predicted_values <- test$Predicted.Lifetime.Post.Consumers
rmse <- RMSE(predicted_values, observed_values)
mae <- MAE(predicted_values, observed_values)
mape <- MAPE(predicted_values, observed_values)
r_squared <- R2_Score(predicted_values, observed_values)
# Display the calculated metrics
cat("Root Mean Squared Error (RMSE):", round(rmse, digits = 4), "\n")
cat("Mean Absolute Error (MAE):", round(mae, digits = 4), "\n")
cat("R-squared (RË†2) Score:", round(r_squared, digits = 4), "\n")
cat("Mean Absolute Percentage Error (MPE):", round(mape, digits = 4), "\n")
ggplot(test, aes(x = observed_values, y = predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(x = "Observed Values", y = "Predicted Values",
title = "Observed vs. Predicted Values") +
theme_bw()
ggplot(test, aes(x = 1:nrow(test), y = observed_values-predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 0, color = "red", linetype = "dashed") +
labs(x = "Observation Index", y = "Residuals",
title = "Observed vs. Predicted Values") +
theme_bw()
reduced_model <- lm(
`sqrt_lt_pc` ~
# `Page.Total.Likes.Diff`+
# `TimePeriod` +
# `sqrt_ptl` +
`Category` +
`Type` +
`Post.Month` +
`Post.Hour` +
`Post.Weekday` +
`Paid`,
data = training
)
summary(reduced_model)
plot(reduced_model)
avPlots(reduced_model)
vif(reduced_model)
AIC(model, reduced_model)
BIC(model, reduced_model)
test$Predicted.Lifetime.Post.Consumers <- predict(reduced_model, newdata = test)
observed_values  <- test$Lifetime.Post.Consumers
predicted_values <- test$Predicted.Lifetime.Post.Consumers
rmse <- RMSE(predicted_values, observed_values)
mae <- MAE(predicted_values, observed_values)
mape <- MAPE(predicted_values, observed_values)
r_squared <- R2_Score(predicted_values, observed_values)
# Display the calculated metrics
cat("Root Mean Squared Error (RMSE):", round(rmse, digits = 4), "\n")
cat("Mean Absolute Error (MAE):", round(mae, digits = 4), "\n")
cat("R-squared (RË†2) Score:", round(r_squared, digits = 4), "\n")
cat("Mean Absolute Percentage Error (MPE):", round(mape, digits = 4), "\n")
ggplot(test, aes(x = observed_values, y = predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(x = "Observed Values", y = "Predicted Values",
title = "Observed vs. Predicted Values") +
theme_bw()
ggplot(test, aes(x = 1:nrow(test), y = observed_values-predicted_values)) +
geom_point() +
geom_abline(intercept = 0, slope = 0, color = "red", linetype = "dashed") +
labs(x = "Observation Index", y = "Residuals",
title = "Observed vs. Predicted Values") +
theme_bw()
